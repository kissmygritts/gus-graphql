type Activity implements Node {
  id: ID!
  activityName: String
  activityType: String
  activityStartDate: DateTime
  activityEndDate: DateTime
  activityDuration: Int
  activityTimeFrame: String
  activityDetails: String
  createdAt: DateTime
  updatedAt: DateTime
  events: [Event]
  # categoriesConnection: [ActivityCategoryConnection]
  categories: [Category]
}

type ActivityConnection {
  totalCount: Int
  edges: [ActivityEdge!]!
  pageInfo: PageInfo
}

type ActivityEdge {
  cursor: String
  node: Activity
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

input ActivityInput {
  activityName: String!
  activityType: String
  activityDetails: String
}

# Activity -> Category 

input PaginationInput {
  first: Int
  after: String
}

type Query {
  activities(paginationInput: PaginationInput): ActivityConnection
}
type Mutation {
  createActivity(input: ActivityInput): Activity
  deleteActivity(id: ID!): Activity
}